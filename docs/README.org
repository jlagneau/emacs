* Literate Emacs Configuration.

This is a really /opinionated/ configuration of GNU/Emacs.

** Emacs defaults.

*** Directory structure.

The directory structure is set up in [[../init.el][init.el]].

- ~lec/cached-dir~ is the cached directory.
- ~lec/doc-dir~ is the directory where the documentation goes.
- ~lec/doc-file~ is this actual file.
- ~lec/tangled-doc-file~ is the output file for all tangled blocks from ~lec/doc-file~.

*** Utilitiy functions.

#+begin_src emacs-lisp
  (defun lec/reload-configuration ()
    "Reload emacs configuration."
    (interactive)
    (load-file user-init-file))

  (defun lec/buffer-predicate (buffer)
    "Do not allow *starred buffers* into the buffer predicate."
    (if (string-match "^*" (buffer-name buffer)) nil t))
  (set-frame-parameter nil 'buffer-predicate 'lec/buffer-predicate)
#+end_src

*TODO:* /Advice to temporarily fix deprecated macro signature in emacs >= 28. Remove this advice when the packages finally fix the changes./

Due to the recent changes in GNU/Emacs for the ~define-obsolete-function-alias~ function, requiring an extra parameter ~when~, a lot of packages issue warning and errors.

#+begin_src emacs-lisp
  (define-advice define-obsolete-function-alias (:filter-args (ll) fix-obsolete)
  (let ((obsolete-name (pop ll))
        (current-name (pop ll))
        (when (if ll (pop ll) "1"))
        (docstring (if ll (pop ll) nil)))
    (list obsolete-name current-name when docstring)))
#+end_src

*** Packages managment.

#+begin_src emacs-lisp
  (setq straight-base-dir lec/cached-dir)
  (setq straight-repository-branch "develop")
  (setq comp-deferred-compilation-deny-list nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" lec/cached-dir))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package
  (straight-use-package 'use-package)
  (setq use-package-always-ensure t)

  ;; Configure use-package to use straight-use-package transparently.
  (use-package straight
    :custom (straight-use-package-by-default t))
#+end_src

*** Benchmark emacs start-up.

#+begin_src emacs-lisp
  (use-package benchmark-init
    :config
    (require 'benchmark-init-modes) ; explicitly required
    (add-hook 'after-init-hook #'benchmark-init/deactivate))
#+end_src

*** Base emacs configuration.

**** Miscellaneous defaults.

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (inibit-startup-message +1)
    (ring-bell-function 'ignore)
    (large-file-warning-threshold 100000000)
    (load-prefer-newer +1)
    (confirm-kill-processes nil)
    (use-dialog-box nil)
    :config
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)
    (column-number-mode +1)
    (size-indication-mode +1))
#+end_src

Highlight the current line.

#+begin_src emacs-lisp
  (use-package hl-line
    :config
    (global-hl-line-mode +1))
#+end_src

Reduce the performance impact of long lines in a file (eg. minified files).

#+begin_src emacs-lisp
  (use-package so-long
    :config
    (global-so-long-mode +1))
#+end_src

Always insert the closing pair of parenthesis, brackets, curly brackets, and double quotes.

#+begin_src emacs-lisp
  (use-package elec-pair
    :config (electric-pair-mode +1))
#+end_src

Remember position in files.

#+begin_src emacs-lisp
  (use-package saveplace
    :custom
    (save-place-forget-unreadable-files t)
    (save-place-file (concat lec/cached-dir "places"))
    :config
    (save-place-mode +1))
#+end_src

**** Matching elements (parenthesis, quotes, etc).

[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] documentation.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))

  (use-package paren
    :config
    (show-paren-mode +1))
#+end_src

**** Whitespaces.

#+begin_src emacs-lisp
  (use-package whitespace
    :custom
    (whitespace-style '(face trailing empty space-after-tab space-before-tab))
    :config
    (global-whitespace-mode +1))
#+end_src

**** Save commands history.

#+begin_src emacs-lisp
  (use-package savehist
    :custom
    (history-length 30)
    (savehist-autosave-interval 60)
    (savehist-additional-variables '(search-ring regexp-search-ring))
    (savehist-file (concat lec/cached-dir "history"))
    :config
    (savehist-mode +1))
#+end_src

**** Automatically revert buffers for files modified outside emacs.

Unless the buffer was modified inside emacs, always refresh buffers to use the latest file version. Also modify dired
to automatically refresh its content too.

#+begin_src emacs-lisp
  (use-package autorevert
    :custom
    (global-auto-revert-non-file-buffers +1)
    :config
    (global-auto-revert-mode +1))
#+end_src

**** Handle emacs backup files.

Put emacs backup and auto save files (~*~~ and ~#*#~) in cached folder to avoid polluting the source files directories.

#+begin_src emacs-lisp
  (let ((backup-dir (concat lec/cached-dir "backups"))
        (auto-saves-dir (concat lec/cached-dir "auto-saves/")))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir))

  (setq auto-save-default t     ; Use auto-save feature
        auto-save-timeout 60    ; Save after 1min idle.
        auto-save-interval 100) ; Save every 100 characters typed.

  (setq backup-by-copying t     ; Don't delink hardlinks
        delete-old-versions t   ; Clean up the backups
        version-control t       ; Use version numbers on backups,
        kept-new-versions 5     ; keep some new versions
        kept-old-versions 2)    ; and some old ones, too
#+end_src

**** Change the location of the recent files

#+begin_src emacs-lisp
  (use-package recentf
    :custom
    (recentf-save-file (concat lec/cached-dir "recentf"))
    (recentf-max-saved-items 500)
    (recentf-max-menu-items 15)
    (recentf-auto-cleanup 'never)
    :config
    (recentf-mode +1))
#+end_src

**** Emacs Yes or No prompt

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** Start GNU/Emacs maximized.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

**** Allow ANSI color codes in the compilation buffer.

#+begin_src emacs-lisp
  (use-package ansi-color
    :hook (compilation-filter . lec/colorize-compilation-buffer)
    :config
    (defun lec/colorize-compilation-buffer ()
      "Colorize the compilation buffer on color escape codes."
      (when (eq major-mode 'compilation-mode)
	(ansi-or-apply-on-region compilation-filter-start (point-max)))))
#+end_src

** Completion frameworks.

*** Company.

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook ((prog-mode . company-mode)
           (org-mode . company-mode))
    :config
    (setq company-tooltip-align-annotations t
          company-minimum-prefix-length 1
          company-async-timeout 10))
#+end_src

#+begin_src emacs-lisp
  (use-package company-posframe
    :config
    (company-posframe-mode 1))
#+end_src

#+begin_src emacs-lisp
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+end_src

*** Helm.

#+begin_src emacs-lisp
  (defun lec/helm-hide-minibuffer-maybe ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                  `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

  (use-package helm
    :defer 0.1
    :bind (("C-c h" . helm-command-prefix)
           ("C-x c" . nil)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           ("C-x c o" . helm-occur)
           ("M-y" . helm-show-kill-ring)
           ("C-x r b" . helm-filtered-bookmarks)
           :map helm-map
           ("TAB" . helm-execute-persistent-action)
           ("<tab>" . helm-execute-persistent-action)
           ("C-i" . helm-execute-persistent-action)
           ("C-z" . helm-select-action))
    :hook ((helm-minibuffer-set-up . lec/helm-hide-minibuffer-maybe))
    :custom
    (helm-M-x-fuzzy-match                  t "Fuzzy matching with M-x.")
    (helm-buffers-fuzzy-matching           t "Fuzzy matching with buffers list.")
    (helm-move-to-line-cycle-in-source     t "Move to end or beginning of source when reaching top or bottom of source.")
    (helm-ff-search-library-in-sexp        t "Search for library in `require' and `declare-function' sexp.")
    (helm-scroll-amount                    8 "Scroll 8 lines other window using M-<next>/M-<prior>.")
    (helm-ff-file-name-history-use-recentf t)
    (helm-echo-input-in-header-line        t)
    (helm-display-header-line              nil)
    (helm-autoresize-max-height            20)
    (helm-autoresize-min-height            5)
    (helm-always-two-windows               nil)
    (helm-default-display-buffer-functions '(display-buffer-in-side-window))
    :config
    (helm-autoresize-mode 1)
    (helm-mode 1))

  (use-package ag)

  (use-package helm-ag
    :after helm ag)

  (use-package helm-projectile
    :after helm projectile
    :bind (("C-c h p" . helm-projectile-switch-project)
           ("C-c h f" . helm-projectile-find-file))
    :config
    (helm-projectile-on))
#+end_src

*** Snippets.

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook ((text-mode . yas-minor-mode)
           (prog-mode . yas-minor-mode)))

  (use-package yasnippet-snippets
    :after (yasnippet))
#+end_src

** Appearance.

*** Base theme.

Base theme from [[https://github.com/doomemacs/themes][Doom themes]].

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-molokai t)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** Modeline.

Modeline based on [[https://github.com/seagle0128/doom-modeline][doom-modeline]].

#+begin_src emacs-lisp
  (use-package doom-modeline
    :after all-the-icons
    :hook (after-init . doom-modeline-mode))
#+end_src

*** Font ligatures.

#+begin_src emacs-lisp
  (use-package fira-code-mode
    :defer 0.1
    :if window-system
    :hook ((org-mode . fira-code-mode)
           (prog-mode . fira-code-mode))
    :custom
    (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
    :config
    (fira-code-mode-set-font))
#+end_src

*** :sparkles: Emoji.

[[https://github.com/iqbalansari/emacs-emojify][Emojify]] documentation.

#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode)
    :config
    (setq emojify-emojis-dir (concat lec/cached-dir "emojify/")))
#+end_src

*** Icons.

Documentation for [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].

#+begin_src emacs-lisp
  (use-package all-the-icons
    :after (doom-modeline))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Line numbers for programming modes.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq linum-format "%3d ")
#+end_src

*** Display colors for hex, rgb, and other common colors codes.

[[http://elpa.gnu.org/packages/rainbow-mode.html][Rainbow-mode]] documentation.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook ((prog-mode . rainbow-mode)
           (text-mode . rainbow-mode)))
#+end_src

** Utility packages.

*** Garbage collection magic.

[[https://github.com/emacsmirror/gcmh][GCMH]] documentation.

#+begin_src emacs-lisp
  (use-package gcmh
    :defer 0.1
    :config
    (gcmh-mode 1))
#+end_src

*** Project managment.

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (setq projectile-cache-file (concat lec/cached-dir "projectile.cache" )
          projectile-known-projects-file (concat lec/cached-dir "projectile-known-projects.eld"))
    (projectile-mode +1))
#+end_src

*** Versioning.

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package magit-todos
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :config
    (setq magit-todos-recursive t
          magit-todos-depth 10
          magit-todos-exclude-globs '(".git/" ".cache/*" "vendor/*" "node_modules/*"))
    (custom-set-variables
     '(magit-todos-keywords (list "TODO" "FIXME"))))

  (use-package transient
    :custom
    (transient-history-file (concat lec/cached-dir "transient/history.el"))
    (transient-levels-file  (concat lec/cached-dir "transient/levels.el"))
    (transient-values-file  (concat lec/cached-dir "transient/values.el")))

  (use-package blamer
    :defer 0.1
    :hook ((prog-mode . blamer-mode)
           (org-mode . blamer-mode))
    :bind (("s-i" . blamer-show-commit-info))
    :custom
    (blamer-idle-time 0.5)
    (blamer-min-offset 2)
    (blamer-view 'overlay)
    (blamer-type 'both)
    (blamer-max-commit-message-length 50)
    (blamer-force-truncate-long-line t)
    (blamer-author-formatter " ✎ %s - ")
    (blamer-commit-formatter "● %s ● ")
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     :background nil
                     :italic t))))

  (use-package git-gutter
    :hook ((prog-mode . git-gutter-mode)
           (org-mode . git-gutter-mode))
    :custom
    (git-gutter:window-width 1)
    (git-gutter:modified-sign " ")
    (git-gutter:added-sign " ")
    (git-gutter:deleted-sign " ")
    :custom-face
    (git-gutter:modified ((t (:background "#FD971F" :foreground "#FD971F"))))
    (git-gutter:added ((t (:background "#B6E63E" :foreground "#B6E63E"))))
    (git-gutter:deleted ((t (:background "#FB2874" :foreground "#FB2874")))))

  (use-package git-gutter-fringe
    :if window-system
    :custom-face
    (git-gutter-fr:modified ((t (:background "#FD971F" :foreground "#FD971F"))))
    (git-gutter-fr:added ((t (:background "#B6E63E" :foreground "#B6E63E"))))
    (git-gutter-fr:deleted ((t (:background "#FB2874" :foreground "#FB2874")))))
#+end_src

*** PDF viewer.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :hook ((pdf-tools-enabled . pdf-view-themed-minor-mode))
    :custom
    (pdf-view-display-size 'fit-page)
    :config
    (pdf-tools-install :no-query)
    (pdf-loader-install :no-query))

  (use-package pdf-view-restore
    :after pdf-tools
    :hook (pdf-view-mode . pdf-view-restore)
    :custom
    (pdf-view-restore-filename (concat lec/cached-dir "pdf-view-restore")))
#+end_src

*** Terminal emulator

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

*** Syntax and spell checking.

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :custom
    (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    :init
    (global-flycheck-mode))

  (use-package flycheck-aspell
    :custom
    (ispell-program-name (executable-find "hunspell"))
    (ispell-really-hunspell t)
    (ispell-local-dictionary-alist
     `((nil "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US") nil utf-8)))
    :config
    (flycheck-aspell-define-checker "org"
                                    "Org" ("--add-filter" "url")
                                    (org-mode))
    (add-to-list 'flycheck-checkers 'org-aspell-dynamic)
    (add-to-list 'flycheck-checkers 'markdown-aspell-dynamic)
    (add-to-list 'flycheck-checkers 'html-aspell-dynamic)
    (add-to-list 'flycheck-checkers 'c-aspell-dynamic))
#+end_src

*** Navigation.

#+begin_src emacs-lisp
    (use-package treemacs
      :defer 0.5
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay        0.5
              treemacs-directory-name-transformer      #'identity
              treemacs-display-in-side-window          t
              treemacs-eldoc-display                   'simple
              treemacs-file-event-delay                5000
              treemacs-file-extension-regex            treemacs-last-period-regex-value
              treemacs-file-follow-delay               0.2
              treemacs-file-name-transformer           #'identity
              treemacs-follow-after-init               t
              treemacs-expand-after-init               t
              treemacs-find-workspace-method           'find-for-file-or-pick-first
              treemacs-git-command-pipe                ""
              treemacs-goto-tag-strategy               'refetch-index
              treemacs-indentation                     2
              treemacs-indentation-string              " "
              treemacs-is-never-other-window           nil
              treemacs-max-git-entries                 5000
              treemacs-missing-project-action          'ask
              treemacs-move-forward-on-expand          nil
              treemacs-no-png-images                   nil
              treemacs-no-delete-other-windows         t
              treemacs-project-follow-cleanup          nil
              treemacs-persist-file                    (expand-file-name "treemacs-persist" lec/cached-dir)
              treemacs-position                        'left
              treemacs-read-string-input               'from-child-frame
              treemacs-recenter-distance               0.1
              treemacs-recenter-after-file-follow      nil
              treemacs-recenter-after-tag-follow       nil
              treemacs-recenter-after-project-jump     'always
              treemacs-recenter-after-project-expand   'on-distance
              treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask" "/vendor" "/target")
              treemacs-show-cursor                     nil
              treemacs-show-hidden-files               t
              treemacs-silent-filewatch                nil
              treemacs-silent-refresh                  nil
              treemacs-sorting                         'alphabetic-asc
              treemacs-select-when-already-in-treemacs 'move-back
              treemacs-space-between-root-nodes        t
              treemacs-tag-follow-cleanup              t
              treemacs-tag-follow-delay                1.5
              treemacs-text-scale                      nil
              treemacs-user-mode-line-format           'none
              treemacs-user-header-line-format         nil
              treemacs-wide-toggle-width               70
              treemacs-width                           35
              treemacs-width-increment                 1
              treemacs-width-is-initially-locked       t
              treemacs-workspace-switch-cleanup        nil)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode 'always)

        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple)))

        (treemacs-hide-gitignored-files-mode nil))
      :bind (nil
             :map global-map
             ("M-0"       . treemacs-select-window)
             ("C-x t 1"   . treemacs-delete-other-windows)
             ("C-x t t"   . treemacs)
             ("C-x t d"   . treemacs-select-directory)
             ("C-x t B"   . treemacs-bookmark)
             ("C-x t C-t" . treemacs-find-file)
             ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after (treemacs projectile))

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once))

    (use-package treemacs-all-the-icons
      :after (treemacs all-the-icons))

    (use-package treemacs-magit
      :after (treemacs magit))

    ;(use-package treemacs-persp ;; treemacs-perspective if you use perspective.el vs. persp-mode
    ;  :after (treemacs persp-mode) ;; or perspective vs. persp-mode
    ;  :ensure t
    ;  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

*** Editorconfig.

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

*** Dashboard buffer at launch.

[[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] documentation.

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-center-content t
          dashboard-startup-banner 'logo
          dashboard-set-navigator t
          dashboard-navigator-buttons
          `(((,nil "Benchmark" "Show benchmark tree" (lambda (&rest _) (benchmark-init/show-durations-tree)))
             (,nil "Update packages" "Update all packages" (lambda (&rest _) (straight-pull-all)) warning)
             (,nil "Reload configuration" "Reload GNU/Emacs configuration" (lambda (&rest _) (load-file (concat user-emacs-directory "init.el"))) warning))
            ((,nil "System services" "Manage services" (lambda (&rest _) (daemons)) error)
             (,nil "System processes" "Manage processes" (lambda (&rest _) (proced)) error)))
          dashboard-show-shortcuts nil
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          dashboard-items '((recents  . 10)
                            (projects . 10)))
    (dashboard-setup-startup-hook))
#+end_src

*** Show emacs shortcuts on key pressed.

[[https://github.com/justbur/emacs-which-key][Which-key]] documentation.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0.1
    :config
    (setq which-key-popup-type 'minibuffer)
    ;; Allow C-h to trigger which-key before it is done automatically.
    (setq which-key-show-early-on-C-h t)
    (setq which-key-idle-delay 1)
    (which-key-mode))
#+end_src

*** Manage daemons.

[[https://github.com/cbowdon/daemons.el][Daemons.el]] documentation.

#+begin_src emacs-lisp
  (use-package daemons
    :defer t)
#+end_src

*** Manage processes.

#+begin_src emacs-lisp
  (use-package proced
    :custom (proced-auto-update-flag t))
#+end_src

** Language server.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :defer 2
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :custom
    (lsp-log-io nil)
    (lsp-print-performance nil)
    (lsp-report-if-no-buffer nil)
    (lsp-keep-workspace-alive nil)
    (lsp-enable-snippet t)
    (lsp-auto-guess-root t)
    (lsp-restart 'iteractive)
    (lsp-session-file (concat lec/cached-dir "lsp-session-v1"))
    (lsp-auto-configure t)
    (lsp-document-sync-method)
    (lsp-auto-execute-action nil)
    (lsp-eldoce-render-all nil)
    (lsp-enable-completion-at-point t)
    (lsp-enable-xref t)
    (lsp-diagnostics-provider :flycheck)
    (lsp-enable-indentation t)
    (lsp-enable-on-type-formatting nil)
    (lsp-before-save-edits nil)
    (lsp-imenu-show-container-name t)
    (lsp-imenu-container-name-separator "/")
    (lsp-imenu-sort-methods '(kind name))
    (lsp-response-timeout 5)
    (lsp-enable-file-watchers nil)
    (lsp-server-trace nil)
    (lsp-semantic-highlighting nil)
    (lsp-enable-imenu t)
    (lsp-signature-auto-activate t)
    (lsp-signature-render-documentation nil)
    (lsp-enable-text-document-color nil)
    (lsp-completion-provider :capf)
    ;(gc-cons-threshold 100000000) ; GCMH should handle it.
    (read-process-output-max (* 3 1024 1024))
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           ;(XXX-mode . lsp)
           ; or better yet, use lsp-deferred
           ;(XXX-mode . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui
    :defer t
    :commands lsp-ui-mode)

  ;; if you are helm user
  (use-package helm-lsp
    :defer t
    :after (helm)
    :commands helm-lsp-workspace-symbol)

  (use-package lsp-treemacs
    :defer t
    :after (treemacs)
    :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode
    :after (lsp-mode)
    :custom
    (dap-ui-mode 1)
    ;; enables mouse hover support
    (dap-tooltip-mode 1)
    ;; use tooltips for mouse hover
    ;; if it is not enabled `dap-mode' will use the minibuffer.
    (tooltip-mode 1)
    ;; displays floating panel with debug buttons
    ;; requies emacs 26+
    (dap-ui-controls-mode nil)
    (dap-utils-extension-path (concat lec/cached-dir "dap-extensions"))
    (dap-breakpoints-file (concat lec/cached-dir "dap-breakpoints")))
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

** Major modes configuration.

*** C/C++.

#+begin_src emacs-lisp
  (use-package cc-mode
    :hook ((c-mode . lsp-deferred)
           (c++-mode . lsp-deferred)))
#+end_src

*** Org.

[[https://orgmode.org/][Org-mode]] documentation.

#+begin_src emacs-lisp
  (use-package org
    :defer t
    :custom
    (org-adapt-indentation nil)
    (org-hide-leading-stars t)
    (org-image-actual-width '(300))
    (org-startup-folded 'content)
    (org-startup-with-inline-images t)
    (org-ellipsis " ▾")
    (org-hide-emphasis-markers t)
    (org-support-shift-select 'always)
    :config
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
     )
    )

  (use-package org-bullets
    :after (org)
    :hook ((org-mode . org-bullets-mode))
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (use-package mixed-pitch
    :hook
    ;; If you want it in all text modes:
    (text-mode . mixed-pitch-mode))

  (use-package visual-fill-column
    :hook ((org-mode . visual-fill-column-mode)
           (org-mode . visual-line-mode))
    :custom
    (visual-fill-column-width 120)
    (visual-fill-column-fringes-outside-margins t)
    (visual-fill-column-center-text t))
#+end_src

*** PHP.

#+begin_src emacs-lisp
  (use-package php-mode
    :defer t
    :hook ((php-mode . lsp-deferred))
    :config
    (dap-setup-php))

  (use-package ac-php
    :after (php-mode company-mode helm))

  (use-package composer)

  (use-package dap-php
    :disabled
    :after (php-mode dap-mode))
#+end_src

*** Rust.

#+begin_src emacs-lisp
  (use-package rust-mode
    :defer t
    :hook ((rust-mode . lsp-deferred))
    :custom
    (lsp-rust-server 'rust-analyzer "Language server of choice for rust."))

  (use-package dap-cpptools
    :disabled
    :after (dap-mode)
    :demand
    :config
    (dap-cpptools-setup)
    (dap-register-debug-template "Rust::GDB Run Configuration"
				 (list :type "gdb"
				       :request "launch"
				       :name "GDB::Run"
				       :gdbpath "rust-gdb"
				       :target nil
				       :cwd nil)))

  (use-package cargo
      :after (rust-mode)
      :hook (rust-mode . cargo-minor-mode))

  (use-package toml-mode)
#+end_src

*** YAML.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode (("\\.yml$" . yaml-mode)
           ("\\.yaml$" . yaml-mode)))
#+end_src
